/*
MSSM Minerva config file for nfcore/ExoSeq pipeline
Contains paths (Losic-Group Specific) for meta files, genomes and
configurations for executors i.e. LSF

THIS IS FOR TESTING ONLY!! ON LSF SUBMIT
*/


params.minerva_account='JanssenIBD_Prospective'
params.job_queue='express_alloc'
params.cluster_mode='manda'

process {
    executor = 'lsf'
    cpus = {2 * task.attempt}
    memory = { 8.GB * task.attempt }
    time = { 2.h * task.attempt }

    
    queue = params.job_queue
    clusterOptions = { "-P $params.minerva_account -m $params.cluster_mode" }
    errorStrategy = { task.exitStatus == 143 ? 'retry' : 'finish' }
    maxRetries = 3
    maxErrors = '-1'
    module = ['gatk/4.0.1.2', 'bwa/0.7.15', 'samtools', 'fastqc', 'trim_galore/0.4.5', 'R', 'picard/2.7.1', 'vep']
    
    $fastqc {
        cpus = { 8 * task.attempt }
        memory = { 16.GB * task.attempt }
        time = { 2.h * task.attempt }
    }

    $trim_galore {
        cpus = { 8 * task.attempt }
        memory = { 16.GB * task.attempt }
        time = { 2.h * task.attempt }
    }

    $bwamem {
        cpus = { 8 * task.attempt }
        memory = { 64.GB * task.attempt }
        time = { 2.h * task.attempt }
    }

    $markDuplicates {
        cpus = { 8 * task.attempt }
        memory = { 32.GB * task.attempt }
        time = { 2.h * task.attempt }
    }

    $recalibrateBam {
        cpus = { 8 * task.attempt }
        memory = { 32.GB * task.attempt }
        time = { 2.h * task.attempt }
    }

    $applyBQSR {
        cpus = { 8 * task.attempt }
        memory = { 32.GB * task.attempt }
        time = { 2.h * task.attempt }
    }
    
    $collectMultiMetrics {
        cpus = { 8 * task.attempt }
        memory = { 32.GB * task.attempt }
        time = { 2.h * task.attempt }
    }

    $variantCall {
        cpus = { 8 * task.attempt }
        memory = { 32.GB * task.attempt }
        time = { 2.h * task.attempt }
    }

    $vepAnnotation {
        cpus = { 16 * task.attempt }
        memory = { 32.GB * task.attempt }
        time = { 2.h * task.attempt }
    }
}

env {
PICARD= '$PICARD'
//SNPEFF_JAR = '$SNPEFF_JAR'
//SNPEFF_HOME = '$SNPEFF_HOME'
//scrape_software_versions='bin/scrape_software_versions.py'\
}


/*
executor {
    name = 'lsf'
    queueSize = 15
    pollInterval = '30 sec'
    jobName = { "$task.name" }
}
*/
