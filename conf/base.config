
params {

// Variables and defaults
name = false
help = false

bam = false
reads = false

genome = 'GRCh38'
multiLane = false
exome = true
singleEnd = false


run_id = false
saveReference = true
kitfiles = 'agilent_v5'
aligner = "bwa-mem"
refDir="/sc/orga/projects/losicb01a/common_folder/reference/"


// Clipping options
notrim = false
saveTrimmed = false
clip_r1 = 0
clip_r2 = 0
three_prime_clip_r1 = 0
three_prime_clip_r2 = 0

// Reference Genome & Annotations
gfasta = params.refs[ params.genome ] ? params.refs[ params.genome ].gfasta ?: false : false
bwa_index = params.refs[ params.genome ] ? params.refs[ params.genome ].bwa_index ?: false : false
dbsnp = params.refs[ params.genome ] ? params.refs[ params.genome ].dbsnp ?: false : false
thousandg = params.refs[ params.genome ] ? params.refs[ params.genome ].thousandg ?: false : false
mills = params.refs[ params.genome ] ? params.refs[ params.genome ].mills ?: false : false
omni = params.refs[ params.genome ] ? params.refs[ params.genome ].omni ?: false : false
hapmap = params.refs[ params.genome ] ? params.refs[ params.genome ].hapmap ?: false : false
snpeff = params.refs[ params.genome ] ? params.refs[ params.genome ].snpeff ?: false : false
vep_cache = params.refs[ params.genome ] ? params.refs[ params.genome ].vep_cache ?: false : false
vep_fasta = params.refs[ params.genome ] ? params.refs[ params.genome ].vep_fasta ?: false : false
bed12 = params.refs[ params.genome ] ? params.refs[ params.genome ].bed12 ?: false : false

bait = params.refs[ params.genome ] ? params.refs[ params.genome ].bait ?: false : false
target = params.refs[ params.genome ] ? params.refs[ params.genome ].target ?: false : false
target_bed = params.refs[ params.genome ] ? params.refs[ params.genome ].target_bed ?: false : false

}

process {
module = ['picard/2.7.1', 'trim_galore/0.4.5', 'R', 'fastqc', 'samtools', 'bwa/0.7.15', 'gatk/4.0.1.2']
errorStrategy = { task.exitStatus == 143 ? 'retry' : 'finish' }
maxRetries = 5
maxErrors = '-1'

cpus = {2 * task.attempt}
memory = { 16.GB * task.attempt }
time = { 2.h * task.attempt }
}

env.PICARD= '$PICARD'


// Show help when needed
if (params.help){
    log.info helpMessage
    exit 0
}

if (!params.refs){
    exit 1, "No Exome Metafiles specified!"
}

// Validate Input indices for BWA Mem and GATK
if(params.aligner == 'bwa' ){
    bwaId = Channel
        .fromPath("${params.gfasta}.bwt")
        .ifEmpty { exit 1, "BWA index not found: ${params.gfasta}.bwt" }
}

// Has the run name been specified by the user?
// this has the bonus effect of catching both -name and --name
custom_runName = params.name
if( !(workflow.runName ==~ /[a-z]+_[a-z]+/) ){
  custom_runName = workflow.runName
}



// Create a summary for the logfile
def summary = [:]
summary['Run Name']     = custom_runName ?: workflow.runName
summary['Reads']        = params.reads
summary['Data Type']    = params.singleEnd ? 'Single-End' : 'Paired-End'
summary['Genome Assembly']       = params.genome
summary['Trim R1'] = params.clip_r1
summary['Trim R2'] = params.clip_r2
summary["Trim 3' R1"] = params.three_prime_clip_r1
summary["Trim 3' R2"] = params.three_prime_clip_r2
if(params.aligner == 'bwa'){
    summary['Aligner'] = "BWA Mem"
    if(params.bwa_index)          summary['BWA Index']   = params.bwa_index
    else if(params.gfasta)          summary['Fasta Ref']    = params.gfasta
}
summary['Save Intermediate Aligned Files'] = params.saveAlignedIntermediates ? 'Yes' : 'No'
summary['Save Intermediate Variant Files'] = params.saveIntermediateVariants ? 'Yes' : 'No'
summary['Max Memory']     = params.max_memory
summary['Max CPUs']       = params.max_cpus
summary['Max Time']       = params.max_time
summary['Output dir']     = params.outdir
summary['Working dir']    = workflow.workDir
if(workflow.revision) summary['Pipeline Release'] = workflow.revision
summary['Current home']   = "$HOME"
summary['Current user']   = "$USER"
summary['Current path']   = "$PWD"
summary['Script dir']     = workflow.projectDir
summary['Config Profile'] = workflow.profile
log.info summary.collect { k,v -> "${k.padRight(15)}: $v" }.join("\n")
log.info "========================================="

try {
    if( ! workflow.nextflow.version.matches(">= $params.nf_required_version") ){
        throw GroovyException('Nextflow version too old')
        }
} catch (all) {
    log.error "====================================================\n" +
              "  Nextflow version $params.nf_required_version required! You are running v$workflow.nextflow.version.\n" +
              "  Pipeline execution will continue, but things may break.\n" +
              "  Please run `nextflow self-update` to update Nextflow.\n" +
              "============================================================"
}



/*
================================================================================
=                               F U N C T I O N S                              =
================================================================================
*/

def exoMessage() {
  // Display ExoSeq message
  log.info "nf-core/ExoSeq ANALYSIS WORKFLOW ~ ${params.version} - " + this.grabRevision() + (workflow.commitId ? " [${workflow.commitId}]" : "")
}

def grabRevision() {
  // Return the same string executed from github or not
  return workflow.revision ?: workflow.commitId ?: workflow.scriptId.substring(0,10)
}

def minimalInformationMessage() {
  // Minimal information message
  log.info "Command Line: " + workflow.commandLine
  log.info "Project Dir : " + workflow.projectDir
  log.info "Launch Dir  : " + workflow.launchDir
  log.info "Work Dir    : " + workflow.workDir
  log.info "Out Dir     : " + params.outdir
  log.info "Genome      : " + params.gfasta
}

def nextflowMessage() {
  // Nextflow message (version + build)
  log.info "N E X T F L O W  ~  version ${workflow.nextflow.version} ${workflow.nextflow.build}"
}

def versionMessage() {
  // Display version message
  log.info "nf-core/ExoSeq ANALYSIS WORKFLOW"
  log.info "  version   : " + version
  log.info workflow.commitId ? "Git info    : ${workflow.repository} - ${workflow.revision} [${workflow.commitId}]" : "  revision  : " + this.grabRevision()
}


workflow.onComplete {
  // Display complete message
  this.nextflowMessage()
  this.exoMessage()
  this.minimalInformationMessage()
  log.info "Completed at: " + workflow.complete
  log.info "Duration    : " + workflow.duration
  log.info "Success     : " + workflow.success
  log.info "Exit status : " + workflow.exitStatus
  log.info "Error report: " + (workflow.errorReport ?: '-')
}

workflow.onError {
  // Display error message
  this.nextflowMessage()
  this.exoMessage()
  log.info "Workflow execution stopped with the following message:"
  log.info "  " + workflow.errorMessage
}
