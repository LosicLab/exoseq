/*
 * -------------------------------------------------
 *  NGI-ExoSeq Nextflow config file
 * -------------------------------------------------
 * Default config options for all environments.
 * Cluster-specific config options should be saved
 * in the conf folder and imported under a profile
 * name here.
 */

params {
	outdir = './results'
	version = '1.0dev'
	nf_required_version = '0.30.2'
	container = 'nfcore/exoseq'
  metaFiles = '/sc/orga/projects/losicb01a/common_folder/reference'
  kitFiles = '/sc/orga/projects/losicb01a/common_folder/reference/kitfiles'
  tracedir = "${params.outdir}/pipeline_info"
  genome = false

  max_cpus = 96
  max_memory = 128
  max_time = 2.h
}


// include Minerva settings
includeConfig ${baseDir}'conf/genomes.config'
includeConfig ${baseDIr}'conf/test.config'


// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

timeline {
  enabled = true
  file = "${params.tracedir}/pipeline_info/nfcore-exoseq_timeline.html"
}
report {
  enabled = true
  file = "${params.tracedir}/pipeline_info/nfcore-exoseq_report.html"
}
trace {
  enabled = true
  file = "${params.tracedir}/pipeline_info/nfcore-exoseq_trace.txt"
}
dag {
  enabled = true
  file = "${params.tracedir}/pipeline_info/nfcore-exoseq_DAG.svg"
}


manifest {
    homePage = "https://github.com/LosicLab/exoseq"
    description = 'Nextflow Exome Sequencing Best Practice analysis pipeline.'
    mainScript = 'main.nf'
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if(type == 'memory'){
    try {
      if(obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'time'){
    try {
      if(obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'cpus'){
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}

