/*
 * -------------------------------------------------
 *  NGI-ExoSeq Nextflow config file
 * -------------------------------------------------
 * Default config options for all environments.
 * Cluster-specific config options should be saved
 * in the conf folder and imported under a profile
 * name here.
 */


params {
	outdir = './results'
	version = '1.0dev'
	nf_required_version = '0.30.2'
	container = 'nfcore/exoseq'
  metafiles = './references'
  kitfiles = './kitfiles'
  tracedir = "${params.outdir}/pipeline_info"

// GRCh38
  gfasta = '/sc/orga/projects/losicb01a/common_folder/reference/NCBI_GRCh38/WholeGenomeFasta/genome.fa'
  bwa_index = '/sc/orga/projects/losicb01a/common_folder/reference/NCBI_GRCh38/WholeGenomeFasta/genome.fa.bwt'
  dbsnp = '/sc/orga/projects/losicb01a/common_folder/reference/GATK/hg38/dbsnp_146.hg38.vcf.gz'
  hapmap = '/sc/orga/projects/losicb01a/common_folder/reference/GATK/hg38/hapmap_3.3.hg38.vcf.gz'
  omni = '/sc/orga/projects/losicb01a/common_folder/reference/GATK/hg38/1000G_omni2.5.hg38.vcf.gz '
  mills = '/sc/orga/projects/losicb01a/common_folder/reference/GATK/hg38/Mills_and_1000G_gold_standard.indels.hg38.vcf.gz'
  thousandg = '/sc/orga/projects/losicb01a/common_folder/reference/GATK/hg38/1000G_phase1.snps.high_confidence.hg38.vcf.gz'
  bed12 = '/sc/orga/projects/losicb01a/common_folder/reference/NCBI_GRCh38/Genes/genes.bed'

  // agilent_sureselect_v5 kit
  target = '/sc/orga/projects/losicb01a/common_folder/reference/kitfiles/hg38/agilent_sureselect_v5/S04380110_Covered.interval_list'
  bait = '/sc/orga/projects/losicb01a/common_folder/reference/kitfiles/hg38/agilent_sureselect_v5/S04380110_Regions.interval_list'
  target_bed = '/sc/orga/projects/losicb01a/common_folder/reference/kitfiles/hg38/agilent_sureselect_v5/S04380110_Covered.bed'
}

process {
    executor = 'local'
    cpus = {2 * task.attempt}
    memory = { 16.GB * task.attempt }
    time = { 2.h * task.attempt }
   errorStrategy = { task.exitStatus == 143 ? 'retry':'finish' }
    maxRetries = 3
    maxErrors = '-1'

    module = ['gatk/4.0.1.2', 'snpeff/4.1', 'bwa/0.7.15', 'samtools', 'fastqc', 'trim_galore/0.4.5', 'R', 'picard/2.7.1']
}

env.PICARD= '$PICARD'

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

timeline {
  enabled = true
  file = "${params.tracedir}/pipeline_info/nfcore-exoseq_timeline.html"
}
report {
  enabled = true
  file = "${params.tracedir}/pipeline_info/nfcore-exoseq_report.html"
}
trace {
  enabled = true
  file = "${params.tracedir}/pipeline_info/nfcore-exoseq_trace.txt"
}
dag {
  enabled = true
  file = "${params.tracedir}/pipeline_info/nfcore-exoseq_DAG.svg"
}


manifest {
    homePage = "https://github.com/LosicLab/exoseq"
    description = 'Nextflow Exome Sequencing Best Practice analysis pipeline.'
    mainScript = 'PairedSingleSampleWF.nf'
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if(type == 'memory'){
    try {
      if(obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'time'){
    try {
      if(obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'cpus'){
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}

